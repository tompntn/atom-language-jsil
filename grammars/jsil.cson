# A series of regular expressions to distinguish elements of the syntax

scopeName: 'source.jsil'
name: 'JSIL'
fileTypes: [
  'jsil'
]
firstLineMatch: ''
foldingStartMarker: ''
foldingStopMarker: ''
patterns: [
  {
    begin: '\\(\\*'
    end: '\\*\\)'
    name: 'comment.jsil'
  }
  {
    match: '\\b(proc)\\s+(\\w+)\\s*\\(.*\\)'
    name: 'meta.function.jsil'
    captures:
        1:
            name: 'keyword.control.jsil'
        2:
            name: 'entity.name.function.jsil'
  }
  {
    match: '\\b(spec)\\s+(\\w+)\\s*\\(.*\\)'
    name: 'meta.function.jsil'
    contentName: ''
    captures:
        1:
            name: 'keyword.control.jsil'
        2:
            name: 'entity.name.function.jsil'
  }
{
    begin: '"'
    beginCaptures:
        0:
            name: 'punctuation.definition.string.begin.jsil'
    end: '"'
    endCaptures:
        0:
            name: 'punctuation.definition.string.end.jsil'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
{
    match: '(\\$\\$undefined_type)|(\\$\\$null_type)|(\\$\\$empty_type)|(\\$\\$none_type)|(\\$\\$boolean_type)|(\\$\\$number_type)|(\\$\\$string_type)|(\\$\\$object_type)|(\\$\\$list_type)|(\\$\\$type_type)|(\\$\\$set_type)'
    name: 'entity.name.type.jsil'
  }
{
    match: '(\\$\\$min_float)|(\\$\\$max_float)|(\\$\\$random)|(\\$\\$e)|(\\$\\$ln10)|(\\$\\$ln2)|(\\$\\$log2e)|(\\$\\$log10e)|(\\$\\$pi)|(\\$\\$sqrt1_2)|(\\$\\$sqrt2)|(\\$\\$UTCTime)|(\\$\\$LocalTime)'
    name: 'constant.language.jsil'
  }
{
    match: '(\\$\\$undefined)|(\\$\\$null)|(\\$\\$empty)|(\\$\\$t)|(\\$\\$f)|(nan)|(inf)|(\\$\\$nil)|(\\bnew\\b)|(\\bdelete\\b)|(\\bdeleteObject\\b)|(\\bhasField\\b)|(\\bgetFields\\b)|(\\bargs\\b)|(\\bapply\\b)|(\\bPHI\\b)|(\\bPSI\\b)'
    name: 'constant.language.jsil'
  }
{
    match: '(\\bret\\b)|(\\bskip\\b)|(:=)|(\\bgoto\\b)|(\\bwith\\b)'
    name: 'keyword.control.jsil'
  }
{
    match: '(<)|(<=)|(=)|(<s)|(\\+)|(\\*)|(-)|(\\+)|(\\/)|(%)|(\\band\\b)|(\\bor\\b)|(&)|(\\|)|(\\^)|(<<)|(>>>)|(\\bm_atan2\\b)|(\\*\\*)|(::)|(@)|(\\+\\+)|(\\b-u-\\b)|(\\b-i-\\b)|(\\b-d-\\b)|(\\b-e-\\b)|(\\b-s-\\b)|(\\b--e--\\b)|(\\b--s--\\b)'
    name: 'constant.language.jsil'
  }
{
    match: '(\\bnot\\b)|(~)|(\\bm_abs\\b)|(\\bm_acos\\b)|(\\bm_asin\\b)|(\\bm_atan\\b)|(\\bm_ceil\\b)|(\\bm_cos\\b)|(\\bm_exp\\b)|(\\bm_floor\\b)|(\\bm_log\\b)|(\\bm_round\\b)|(\\bm_sgn\\b)|(\\bm_sin\\b)|(\\bm_sqrt\\b)|(\\bm_tan\\b)|(\\bis_primitive\\b)|(\\bnum_to_string\\b)|(\\bnum_to_int\\b)|(\\bnum_to_uint16\\b)|(\\bnum_to_int32\\b)|(\\bstring_to_num\\b)|(\bcar\\b)|(\\bcdr\\b)|(\\bl-len\\b)|(\\bs-len\\b)'
    name: 'constant.language.jsil'
  }
{
    match: '(\\btypeOf\\b)|(\\bassume\\b)|(\\bassert\\b)|(\\bmake-symbol-number\\b)|(\\bmake-symbol-string\\b)|(\\bl-nth\\b)|(\\bs-nth\\b)'
    name: 'constant.language.jsil'
  }
{
    match: '(#(\\w|_|$)*)|($l(\\w|_)*)'
    name: 'variable.jsil'
  }
{
    match: '^\\s*([\\.A-KM-Za-z_\\$][\\.A-Za-z0-9_\\$]*):'
    name: 'entity.name.tag.jsil'
  }
{
    match: ''
    begin: '{{'
    beginCaptures:
        0:
            name: 'constant.character.jsil'
    end: '}}'
    endCaptures:
        0:
            name: 'constant.character.jsil'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
{
    match: ''
    begin: '-{'
    beginCaptures:
        0:
            name: 'constant.character.jsil'
    end: '}-'
    endCaptures:
        0:
            name: 'constant.character.jsil'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
{
    match: ''
    begin: '\\[\\['
    end: '\\]\\]'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
{
    match: ''
    begin: '\\[\\*'
    end: '\\*\\]'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
{
    match: ''
    begin: '\\[\\+'
    end: '\\+\\]'
    name: 'string.quoted.single.jsil'
    contentName: ''
  }
]